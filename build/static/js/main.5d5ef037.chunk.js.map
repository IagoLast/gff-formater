{"version":3,"sources":["parser.js","App.js","serviceWorker.js","index.js"],"names":["genescan","input","opts","split","filter","line","startsWith","map","trim","offset","chr","replace","type","strand","startStr","endStr","start","parseInt","end","join","_genescanLine","geneID","gene","_geneIDLine","fgenesh","geneNumber","_fgeneshLine","App","useState","value","setValue","setOffset","parsed","setParsed","setChr","program","setProgram","className","placeholder","onChange","e","target","id","htmlFor","onClick","result","parser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d5ef037.chunk.js","sourcesContent":["function genescan(input, opts) {\n    const lines =\n        input\n            .split('\\n')\n            .filter(line => !line.startsWith('#'))\n            .filter(line => line !== '')\n            .map(line => line.trim())\n            .map(line => _genescanLine(line, opts));\n\n    return lines.join('\\n');\n\n}\n\nfunction _genescanLine(line, { offset = 0, chr = 'chr22' }) {\n    line = line.replace(/ \\s*/g, '\\t');\n    const [, type, strand, startStr, endStr] = line.split('\\t');\n    const start = parseInt(startStr);\n    const end = parseInt(endStr);\n    line = [chr, 'genescan_gff', type, start + parseInt(offset), end + parseInt(offset), '.', strand, '.', 'fragment_0'].join('\\t');\n    return line;\n}\n\nfunction geneID(input, opts) {\n    const lines =\n        input\n            .split('\\n')\n            .filter(line => !line.startsWith('#'))\n            .filter(line => line !== '')\n            .map(line => line.trim())\n            .map(line => _geneIDLine(line, opts));\n\n    return lines.join('\\n');\n}\n\nfunction _geneIDLine(line, { offset = 0, chr = 'chr22' }) {\n    const [, , type, startStr, endStr, , , , gene] = line.split('\\t');\n    const start = parseInt(startStr);\n    const end = parseInt(endStr);\n    line = [chr, 'gene_id_gff', type, start + parseInt(offset), end + parseInt(offset), '.', '+', '.', gene].join('\\t');\n    return line;\n}\n\nfunction fgenesh(input, opts) {\n    const lines =\n        input\n            .split('\\n')\n            .filter(line => !line.startsWith('#'))\n            .filter(line => line !== '')\n            .map(line => line.trim())\n            .map(line => _fgeneshLine(line, opts));\n\n    return lines.join('\\n');\n\n\n}\n\nfunction _fgeneshLine(line, { offset = 0, chr = 'chr22' }) {\n    line = line.replace(/ \\s*/g, '\\t');\n    const [geneNumber, strand, count, type, startStr, dash, endStr, score] = line.split('\\t');\n    const start = parseInt(startStr);\n    const end = parseInt(endStr);\n    line = [chr, 'fgenesh_gff', type, start + parseInt(offset), end + parseInt(offset), '.', '+', '.', `part_${geneNumber}`].join('\\t');\n    return line;\n}\n\nexport default { genescan, geneID, fgenesh };","import React, { useState } from 'react';\nimport './App.css';\nimport parser from './parser';\n\nfunction App() {\n  const [value, setValue] = useState('');\n  const [offset, setOffset] = useState(0);\n  const [parsed, setParsed] = useState('Formated GFF output will appear here');\n  const [chr, setChr] = useState('chr22');\n  const [program, setProgram] = useState('fgenesh');\n\n  function parse() {\n    let result;\n    switch (program) {\n      case 'geneid':\n        result = parser.geneID(value, { offset, chr });\n        break;\n      case 'genescan':\n        result = parser.genescan(value, { offset, chr });\n        break;\n      case 'fgenesh':\n      default:\n        result = parser.fgenesh(value, { offset, chr });\n    }\n\n    setParsed(result);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <h1> GFF Converter</h1>\n      <p>\n        Generates GFF output from different program outputs (FGenesh, GeneID and GeneScan)\n      </p>\n      <textarea placeholder=\"Paste the output of the program here. Copy only the given exon data\" className=\"Input\" value={value} onChange={e => setValue(e.target.value)} id=\"input\" ></textarea>\n\n      <label htmlFor=\"offset\"> Offset:\n        <input id=\"offset\" type=\"number\" value={offset} onChange={e => setOffset(e.target.value)} />\n      </label>\n\n      <label htmlFor=\"offset\"> Chromosome:\n        <input id=\"chr\" type=\"text\" value={chr} onChange={e => setChr(e.target.value)} />\n      </label>\n\n      <label htmlFor=\"offset\"> Program:\n      <select id=\"program\" value={program} onChange={e => setProgram(e.target.value)}>\n          <option value=\"fgenesh\">FGENESH</option>\n          <option value=\"geneid\">GeneID</option>\n          <option value=\"genescan\">GeneScan</option>\n        </select>\n      </label>\n\n      <button value=\"parse\" onClick={parse} > GENERATE GFF </button>\n\n      <pre>\n        {parsed}\n      </pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}